const CACHE_NAME = 'retro-arcade-kingdom-cache-v1';
const urlsToCache = [
    '/',
    '/index.html',
    '/styles.css', // Generated by Tailwind
    // '/games.json', // Removed as games data is now fetched from Firestore
    'https://cdn.jsdelivr.net/gh/EmulatorJS/EmulatorJS@4.0.0/data/emulator.min.js',
    'https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&family=Press+Start2P&display=swap',
    'https://fonts.gstatic.com/s/pressstart2p/v15/8Lg6dHwQoljpFLN0NX5FE7GW.woff2', // Specific font file
    'https://fonts.gstatic.com/s/inter/v13/UcCO3FwrK3iLTeHuS_fvQtMw.woff2' // Specific font file
];

self.addEventListener('install', (event) => {
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then((cache) => {
                console.log('Opened cache');
                return cache.addAll(urlsToCache);
            })
            .catch(error => {
                console.error('Failed to cache all URLs during install:', error);
            })
    );
});

self.addEventListener('fetch', (event) => {
    event.respondWith(
        caches.match(event.request)
            .then((response) => {
                // Cache hit - return response
                if (response) {
                    return response;
                }
                // No cache hit - fetch from network
                return fetch(event.request).then(
                    (response) => {
                        // Check if we received a valid response
                        if (!response || response.status !== 200 || response.type !== 'basic') {
                            return response;
                        }

                        // IMPORTANT: Clone the response. A response is a stream
                        // and can only be consumed once. We must clone it so that
                        // the browser can consume the original response and we can
                        // consume the clone.
                        const responseToCache = response.clone();

                        caches.open(CACHE_NAME)
                            .then((cache) => {
                                cache.put(event.request, responseToCache);
                            });

                        return response;
                    }
                ).catch(error => {
                    console.error('Fetch failed:', error);
                    // You could return a fallback page here for offline scenarios
                    // return caches.match('/offline.html');
                });
            })
    );
});

self.addEventListener('activate', (event) => {
    const cacheWhitelist = [CACHE_NAME];
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cacheName) => {
                    if (cacheWhitelist.indexOf(cacheName) === -1) {
                        // Delete old caches
                        console.log('Deleting old cache:', cacheName);
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
});